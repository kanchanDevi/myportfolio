{"version":3,"file":"fresh.cjs.development.js","sources":["../src/state/immer.ts","../src/state/formState.ts","../src/form/CancelButton.tsx","../src/form/Tooltip.tsx","../src/fields/Select.tsx","../src/fields/Reference.tsx","../src/fields/Password.tsx","../src/fields/Tags.tsx","../src/fields/TextArea.tsx","../src/fields/Number.tsx","../src/fields/MarkdownInput.tsx","../src/fields/Markdown.tsx","../src/fields/Text.tsx","../src/fields/Toggle.tsx","../src/Field.tsx","../src/index.tsx"],"sourcesContent":["import produce from 'immer'\n\nexport const immer = (config) => (set, get) =>\n  config((fn) => set(produce(fn)), get)\n","import React from 'react'\nimport create from 'zustand'\nimport { immer } from './immer'\n\n// Woof on theses types.\n// TODO fix these types\nconst store = (set: (val: any) => any) => ({\n  data: {},\n  isReady: {},\n  defaultValues: {},\n  setForm: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId] = { ...formData }\n    }),\n  setField: (id: string, value: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId][id] = value\n    }),\n  setDefaults: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.defaultValues[formId] = { ...formData }\n    }),\n  register: (formData: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId] = { ...formData }\n      state.defaultValues[formId] = { ...formData }\n      state.isReady[formId] = true\n    }),\n  unregister: (formId: string) =>\n    set((state: any) => {\n      state.isReady[formId] = false\n    }),\n  registerField: (fieldId: string, defaultValue: any, formId: string) =>\n    set((state: any) => {\n      state.data[formId][fieldId] = defaultValue\n    }),\n  resetForm: (formId: string) =>\n    set((state: any) => {\n      state.data[formId] = state.defaultValues[formId]\n    }),\n})\n\nexport const useForm = create(immer(store))\n\nexport const FormContext = React.createContext(null)\n","import React from 'react'\nimport { useForm } from '../state/formState'\n\nconst CancelButton = ({\n  cancelAction,\n  cancelText = 'Cancel',\n  formId,\n}: Props) => {\n  const { data, setField, isReady, resetForm } = useForm()\n  return (\n    <button\n      id=\"fresh-cancel\"\n      className=\"fresh-button fresh-cancel\"\n      onClick={() => {\n        cancelAction(formId)\n        resetForm(formId)\n      }}\n      type=\"reset\"\n    >\n      {cancelText}\n    </button>\n  )\n}\n\ntype Props = {\n  cancelAction: (resetForm) => void\n  cancelText: string\n  formId: string\n}\nexport default CancelButton\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\ninterface TooltipInterface {\n  tooltip: string\n  tooltipBackground: string\n  tooltipColor: string\n  tooltipIconColor: string\n}\n\nconst Tooltip = ({\n  tooltip,\n  tooltipBackground,\n  tooltipColor,\n  tooltipIconColor,\n}: TooltipInterface) => {\n  const tooltipStyle = {\n    '--fresh-tooltip-background': tooltipBackground,\n    '--fresh-tooltip-color': tooltipColor,\n    '--fresh-tooltip-icon-color': tooltipIconColor,\n  } as React.CSSProperties\n  return (\n    <span className=\"fresh-tooltip\" data-tooltip={tooltip} style={tooltipStyle}>\n      <svg\n        className=\"fresh-tooltip-icon\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58172 12.4183 0 8 0C3.58172 0 0 3.58172 0 8C0 12.4183 3.58172 16 8 16ZM9.02539 5.91797H5.84668V7.79102H6.91309V11.127H5.84668V13H10.0098V11.127H9.02539V5.91797ZM6.89258 3.16309C6.83333 3.30892 6.80371 3.46615 6.80371 3.63477C6.80371 3.80339 6.83333 3.96289 6.89258 4.11328C6.95638 4.25911 7.04297 4.38672 7.15234 4.49609C7.26172 4.60547 7.38932 4.69206 7.53516 4.75586C7.68555 4.81966 7.84733 4.85156 8.02051 4.85156C8.18457 4.85156 8.33952 4.81966 8.48535 4.75586C8.63118 4.69206 8.75879 4.60547 8.86816 4.49609C8.97754 4.38672 9.06413 4.25911 9.12793 4.11328C9.19173 3.96289 9.22363 3.80339 9.22363 3.63477C9.22363 3.46615 9.19173 3.30892 9.12793 3.16309C9.06413 3.0127 8.97754 2.88281 8.86816 2.77344C8.75879 2.66406 8.63118 2.57747 8.48535 2.51367C8.33952 2.44987 8.18457 2.41797 8.02051 2.41797C7.84733 2.41797 7.68555 2.44987 7.53516 2.51367C7.38932 2.57747 7.26172 2.66406 7.15234 2.77344C7.04297 2.88281 6.95638 3.0127 6.89258 3.16309Z\"\n          fill={tooltipIconColor}\n        />\n      </svg>\n    </span>\n  )\n}\n\nTooltip.propTypes = {\n  tooltip: PropTypes.string,\n  tooltipBackground: PropTypes.string,\n  tooltipColor: PropTypes.string,\n  tooltipIconColor: PropTypes.string,\n}\n\nTooltip.defaultProps = {\n  tooltip: '',\n  tooltipBackground: '#eee',\n  tooltipColor: '#000',\n  tooltipIconColor: '#000',\n}\nexport default Tooltip\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Select = ({\n  options,\n  fieldId,\n  formId,\n  displayProperty = '',\n  valueProperty = '',\n  className = '',\n}: FieldInterface) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId]\n      ? defaultValues?.[formId]?.[fieldId]?.[valueProperty] ||\n        defaultValues?.[formId]?.[fieldId]\n      : options[0]\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <select\n      id={`fresh-${fieldId}-${formId}`}\n      className={`fresh-input fresh-input-select ${className}`}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n      value={data[formId][fieldId]}\n    >\n      {options.map((option, i) => (\n        <option\n          value={option?.[valueProperty] || option}\n          key={`fresh-${fieldId}-${formId}-${i}`}\n          className=\"fresh-option\"\n        >\n          {option?.[displayProperty] || option}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Select\n","import React, { useState, useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst Reference = ({\n  options,\n  fieldId,\n  keyProperty = 'id',\n  displayProperty,\n  placeholder = '',\n  className = '',\n  formId,\n}: FieldInterface) => {\n  const { data, setField, isReady, defaultValues, registerField } = useForm()\n  const [inputValue, setInputValue] = useState(defaultValues?.[formId]?.[fieldId]?.[displayProperty] || '')\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  // If the form is not registered or there is not data object\n  if (!isReady) return null\n  return (\n    <>\n      <input\n        id={`fresh-${fieldId}-${formId}`}\n        onChange={e => setInputValue(e.target.value)}\n        value={inputValue}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => setIsFocused(false)}\n        placeholder={placeholder}\n        type=\"text\"\n        className={`fresh-input fresh-input-reference ${className}`}\n      />\n      {isFocused && (\n        <div className=\"fresh-focused\">\n          {options\n            .filter(option =>\n              option[displayProperty]\n                .toLowerCase()\n                .includes(inputValue.toLowerCase())\n            )\n            .map(option => (\n              <div\n                key={option[keyProperty]}\n                style={{ padding: '0.75em' }}\n                onMouseDown={() => {\n                  setField(fieldId, option, formId)\n                  setInputValue(option[displayProperty])\n                }}\n              >\n                {option[displayProperty]}\n              </div>\n            ))}\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default Reference\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst Password = ({\n  placeholder,\n  className = '',\n  required,\n  fieldId,\n  strength = true,\n  type,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  // If the form is not registered or there is not data object\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  const strengthValue = calculateScore(data[formId][fieldId] ?? '')\n\n  let strengthMeter = {\n    background: '#ccc',\n    width: 'calc(193px * 0.25)',\n  }\n  if (strengthValue >= 2 && strengthValue < 3) {\n    strengthMeter = {\n      width: 'calc(193px * 0.5)',\n      background: 'red',\n    }\n  } else if (strengthValue >= 3 && strengthValue < 4) {\n    strengthMeter = {\n      width: 'calc(193px * 0.75)',\n      background: 'red',\n    }\n  } else if (strengthValue >= 4) {\n    strengthMeter = {\n      width: 'calc(193px * 1)',\n      background: 'green',\n    }\n  }\n  return (\n    <>\n      <input\n        className={`fresh-input fresh-input-password ${className}`}\n        placeholder={placeholder}\n        type={type}\n        required={required}\n        id={`fresh-${fieldId}-${formId}`}\n        value={data[formId][fieldId]}\n        onChange={e => setField(fieldId, e.target.value, formId)}\n      />\n      {strength && (\n        <div\n          style={{\n            height: '4px',\n            marginBottom: '1rem',\n            transition: '0.3s ease all',\n            ...strengthMeter,\n          }}\n        />\n      )}\n    </>\n  )\n}\n\nconst options = {\n  showText: true,\n  fieldPartialMatch: true,\n  minimumLength: 4,\n}\n\nfunction calculateScore(password: string) {\n  var score = 0\n\n  // password < options.minimumLength\n  if (password.length < options.minimumLength) {\n    return -1\n  }\n  // password length\n  score += password.length * 4\n\n  // password has 3 numbers\n  if (password.match(/(.*[0-9].*[0-9].*[0-9])/)) {\n    score += 5\n  }\n\n  // password has at least 2 sybols\n  var symbols: any = '.*[!,@,#,$,%,^,&,*,?,_,~]'\n  symbols = new RegExp('(' + symbols + symbols + ')')\n  if (password.match(symbols)) {\n    score += 5\n  }\n\n  // password has Upper and Lower chars\n  if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) {\n    score += 10\n  }\n\n  // password has number and chars\n  if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) {\n    score += 15\n  }\n\n  // password has number and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([0-9])/)\n  ) {\n    score += 15\n  }\n\n  // password has char and symbol\n  if (\n    password.match(/([!,@,#,$,%,^,&,*,?,_,~])/) &&\n    password.match(/([a-zA-Z])/)\n  ) {\n    score += 15\n  }\n\n  // password is just numbers or chars\n  if (password.match(/^\\w+$/) || password.match(/^\\d+$/)) {\n    score -= 10\n  }\n\n  if (score > 100) {\n    score = 100\n  }\n\n  if (score < 0) {\n    score = 0\n  }\n\n  return score * 0.04\n}\n\nexport default Password\n","import React, { useEffect } from 'react'\nimport TagsInput from 'react-tagsinput'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Tags = ({ fieldId, className = '', formId }: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? []\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <TagsInput\n      value={data[formId][fieldId] || []}\n      onChange={(value: string[]) => setField(fieldId, value, formId)}\n      className={`fresh-input-tags ${className}`}\n      id={`fresh-${fieldId}-${formId}`}\n      style={{\n        marginTop: '1rem',\n      }}\n    />\n  )\n}\n\nexport default Tags\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\n\ninterface RefValue {\n  id: string\n  text: string\n}\n\ntype Props = {\n  required?: boolean\n  children: string\n  type?: string\n  fieldId?: string\n  name?: string\n  label?: boolean\n  error?: string\n  placeholder?: string\n  options: any\n  className?: string\n  tooltip?: string\n  strength?: boolean\n  displayProperty?: string\n  formId: string\n}\n\nexport const TextArea: React.FC<Props> = ({\n  className,\n  fieldId,\n  formId,\n  placeholder,\n}) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <textarea\n      id={`fresh-${fieldId}-${formId}`}\n      placeholder={placeholder}\n      value={data[formId][fieldId]}\n      className={`fresh-input fresh-input-textarea ${className}`}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n    />\n  )\n}\n\nexport default TextArea\n","import React, { useEffect } from 'react'\nimport { useForm } from '../state/formState'\nimport { FieldInterface } from './types'\n\nconst NumberField = ({\n  fieldId,\n  placeholder,\n  required,\n  formId,\n  className,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <input\n      required={required}\n      className={`fresh-input fresh-input-number ${className}`}\n      placeholder={placeholder}\n      id={`fresh-${fieldId}-${formId}`}\n      type=\"number\"\n      value={data[formId][fieldId]}\n      onChange={e => {\n        const value = e.target.value ? parseInt(e.target.value) : null\n        setField(fieldId, value, formId)\n      }}\n    />\n  )\n}\n\nexport default NumberField\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react'\nimport unquote from 'unquote'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _list?: boolean\n    inline?: boolean\n    inTable?: boolean\n    key?: React.Key\n    simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<ParserOutput>\n    react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n} as const\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--.*?-->/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function(node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: Object\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function(rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function(_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function(styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function(type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function(typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(parse, content, state): MarkdownToJSX.ParserResult {\n  state.inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<\n  typeof parseInline\n>> = (capture, parse, state) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type].react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    )\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function(map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state.inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function(item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state.inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state.inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state.inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      match: function(source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function() {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(stripHtmlComments(markdown))\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          )\n        })}\n      </footer>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n","import React, { useEffect } from 'react'\nimport Markdown from './MarkdownInput'\nimport { useForm } from '../state/formState'\n\nimport { FieldInterface } from './types'\n\nexport const MarkdownTextArea = ({\n  fieldId,\n  placeholder,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <div className=\"fresh-markdown-wrapper\">\n      <textarea\n        id={`fresh-${fieldId}`}\n        placeholder={placeholder}\n        value={data[formId][fieldId]}\n        className=\"fresh-input fresh-input-textarea\"\n        onChange={e => setField(fieldId, e.target.value, formId)}\n      />\n      <div className=\"fresh-input fresh-input-markdown\">\n        <Markdown children={data[formId][fieldId] || ''} />\n      </div>\n    </div>\n  )\n}\n\nexport default MarkdownTextArea\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Text = ({\n  className,\n  fieldId,\n  placeholder,\n  required,\n  type,\n  formId,\n}: FieldInterface) => {\n  const { data, setField, registerField, defaultValues } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? ''\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <input\n      required={required}\n      className={`fresh-input fresh-input-${type} ${className}`}\n      placeholder={placeholder}\n      id={`fresh-${fieldId}-${formId}`}\n      type={type}\n      value={data[formId][fieldId]}\n      onChange={e => setField(fieldId, e.target.value, formId)}\n    />\n  )\n}\n\nexport default Text\n","import React, { useEffect } from 'react'\nimport { FieldInterface } from './types'\nimport { useForm } from '../state/formState'\n\nconst Toggle = ({ fieldId, className = '', formId }: FieldInterface) => {\n  const { data, setField, defaultValues, registerField } = useForm()\n  useEffect(() => {\n    const defaultValue = defaultValues?.[formId]?.[fieldId] ?? false\n    registerField(fieldId, defaultValue, formId)\n  }, [])\n  if (!(fieldId in data[formId])) return null\n\n  return (\n    <div className={`${className} fresh-switch`}>\n      <input\n        checked={data[formId][fieldId] || false}\n        type=\"checkbox\"\n        id={`fresh-${fieldId}`}\n        className=\"fresh-input-toggle\"\n        onChange={_ => setField(fieldId, !data[formId][fieldId], formId)}\n      />\n      <span\n        className={`fresh-slider ${data[formId][fieldId] ? `on` : ''}`}\n        onChange={_ => setField(fieldId, !data[formId][fieldId], formId)}\n      />\n    </div>\n  )\n}\n\nexport default Toggle\n","import React, { useContext } from 'react'\nimport { FormContext } from './state/formState'\nimport { FieldInterface } from './fields/types'\nimport Tooltip from './form/Tooltip'\nimport Select from './fields/Select'\nimport Reference from './fields/Reference'\nimport Password from './fields/Password'\nimport Tags from './fields/Tags'\nimport TextArea from './fields/TextArea'\nimport NumberField from './fields/Number'\nimport Markdown from './fields/Markdown'\nimport Text from './fields/Text'\nimport Toggle from './fields/Toggle'\n\nconst camelCase = str => {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n    if (+match === 0) return ''\n    return index == 0 ? match.toLowerCase() : match.toUpperCase()\n  })\n}\n\nconst Field = ({\n  required = false,\n  children,\n  name = '',\n  type = 'text',\n  label = true,\n  error,\n  placeholder = '',\n  options,\n  strength,\n  className = '',\n  defaultValue = '',\n  displayProperty = '',\n  valueProperty = '',\n  keyProperty = 'id',\n  tooltip,\n  readOnly = false,\n  wrapperStyle = {},\n}: FieldInterface) => {\n  const fieldId = name || camelCase(children)\n  const { formId } = useContext(FormContext)\n\n  const standardProps = {\n    children,\n    required,\n    name,\n    type,\n    label,\n    error,\n    placeholder,\n    options,\n    className,\n    defaultValue,\n    displayProperty,\n    readOnly,\n    formId,\n  }\n  return (\n    <div className={`fresh-field-wrapper ${fieldId}`} style={wrapperStyle}>\n      <label className=\"fresh-label\" htmlFor={`fresh-${fieldId}`}>\n        <span className=\"fresh-title\">\n          {required && '*'} {label && children}&nbsp;\n          {tooltip && <Tooltip tooltip={tooltip} />}\n        </span>\n        {(() => {\n          switch (type) {\n            case 'select':\n              return (\n                <Select\n                  fieldId={fieldId}\n                  valueProperty={valueProperty}\n                  {...standardProps}\n                />\n              )\n            case 'reference':\n              return (\n                <Reference\n                  fieldId={fieldId}\n                  keyProperty={keyProperty}\n                  {...standardProps}\n                />\n              )\n            case 'password':\n              return (\n                <Password\n                  strength={strength}\n                  fieldId={fieldId}\n                  {...standardProps}\n                />\n              )\n            case 'tags':\n              return <Tags fieldId={fieldId} {...standardProps} />\n            case 'textarea':\n              return <TextArea fieldId={fieldId} {...standardProps} />\n            case 'number':\n              return <NumberField fieldId={fieldId} {...standardProps} />\n            case 'markdown':\n              return <Markdown fieldId={fieldId} {...standardProps} />\n            case 'toggle':\n              return <Toggle fieldId={fieldId} {...standardProps} />\n            default:\n              return <Text fieldId={fieldId} {...standardProps} />\n          }\n        })()}\n      </label>\n      {error && <div className=\"fresh-error\">{error}</div>}\n    </div>\n  )\n}\n\nField.defaultProps = {\n  defaultValue: null,\n  options: [],\n  tooltip: '',\n}\n\nexport default Field\n","import React, { useEffect } from 'react'\nimport { useForm, FormContext } from './state/formState'\nimport CancelButton from './form/CancelButton'\nexport { default as Field } from './Field'\nimport './fields/global.css'\n\ntype FormProps = {\n  cancelAction?: (_: any) => void\n  cancelButton?: boolean\n  cancelText?: string\n  formId: string\n  className?: string\n  defaultValues?: any // sorry. not sure how to type this properly PR wanted\n  onSubmit(formState: { [key: string]: any }): void\n  onChange?(formState: object): void\n  submitText?: string\n}\n\nconst Form: React.FC<FormProps> = ({\n  cancelAction = () => null,\n  onChange = null,\n  cancelButton = true,\n  cancelText = 'Cancel',\n  children,\n  formId,\n  onSubmit,\n  submitText = 'Submit',\n  className = '',\n  defaultValues = {},\n}) => {\n  const { data, register, isReady, unregister } = useForm()\n\n  useEffect(() => {\n    register(defaultValues, formId)\n    return () => {\n      unregister(formId)\n    }\n  }, [])\n\n  if (!isReady[formId]) return null\n\n  return (\n    <FormContext.Provider value={{ formId }}>\n      <form\n        className={`${className} fresh-form`}\n        onSubmit={e => {\n          e.preventDefault()\n          onSubmit(data[formId])\n        }}\n        onChange={() => {\n          if (onChange) onChange(data[formId])\n        }}\n      >\n        {children}\n        <div>\n          <button\n            id=\"fresh-submit\"\n            className=\"fresh-button fresh-submit\"\n            type=\"submit\"\n          >\n            {submitText}\n          </button>\n          {cancelButton && (\n            <CancelButton\n              formId={formId}\n              cancelAction={cancelAction}\n              cancelText={cancelText}\n            />\n          )}\n        </div>\n      </form>\n    </FormContext.Provider>\n  )\n}\n\n// TODO\n// AUto form prop that allows for automatic form building via graphql. Required fields and all\n\n// Future api idea <Form mutation={GRAPHQL_MUTATION} /> one liner\n\n// Reset on submit option\nexport { Form, useForm }\n"],"names":["immer","config","set","get","fn","produce","store","data","isReady","defaultValues","setForm","formData","formId","state","setField","id","value","setDefaults","register","unregister","registerField","fieldId","defaultValue","resetForm","useForm","create","FormContext","React","createContext","CancelButton","cancelAction","cancelText","className","onClick","type","Tooltip","tooltip","tooltipBackground","tooltipColor","tooltipIconColor","tooltipStyle","style","width","height","viewBox","fill","xmlns","fillRule","clipRule","d","propTypes","PropTypes","string","defaultProps","Select","options","displayProperty","valueProperty","useEffect","onChange","e","target","map","option","i","key","Reference","keyProperty","placeholder","useState","inputValue","setInputValue","isFocused","setIsFocused","onFocus","onBlur","filter","toLowerCase","includes","padding","onMouseDown","Password","required","strength","strengthValue","calculateScore","strengthMeter","background","marginBottom","transition","showText","fieldPartialMatch","minimumLength","password","score","length","match","symbols","RegExp","Tags","TagsInput","marginTop","TextArea","NumberField","parseInt","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_BULLET","LIST_ITEM_PREFIX","LIST_ITEM_PREFIX_R","LIST_ITEM_R","LIST_R","LINK_INSIDE","LINK_HREF_AND_TITLE","LINK_R","IMAGE_R","BLOCK_SYNTAXES","containsBlockSyntax","input","some","r","test","slugify","str","replace","parseTableAlignCapture","alignCapture","parseTableRow","source","parse","prevInTable","inTable","tableRow","trim","cells","forEach","node","push","content","parseTableAlign","alignText","split","parseTableCells","rowsText","rowText","parseTable","capture","inline","header","align","getTableStyle","colIndex","textAlign","normalizeAttributeKey","hyphenIndex","indexOf","_","letter","toUpperCase","attributeValueToJSXPropValue","reduce","styles","kvPair","slice","camelCasedKey","substr","sanitizeUrl","normalizeWhitespace","parserFor","rules","ruleList","Object","keys","order","process","isFinite","console","warn","sort","typeA","typeB","orderA","orderB","nestedParse","result","prevCapture","ruleType","rule","currCaptureString","substring","parsed","outerParse","inlineRegex","regex","exec","simpleInlineRegex","simple","blockRegex","anyScopeRegex","reactFor","outputFunc","nestedReactOutput","ast","Array","isArray","oldKey","lastWasString","nodeOut","isString","url","decoded","decodeURIComponent","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","ruleOutput","nestedRuleOutput","react","cx","args","Boolean","join","src","path","fb","ptr","frags","undefined","shift","getTag","tag","overrides","override","Priority","compiler","markdown","createElementFn","createElement","h","props","overrideProps","children","compile","forceInline","forceBlock","arr","emitter","parser","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","unquote","mappedKey","normalizedValue","cloneElement","stripHtmlComments","html","Error","prototype","toString","call","footnotes","refs","blockQuote","HIGH","output","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","href","gfmTask","completed","checked","readOnly","heading","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","address","list","isStartOfLine","isListBlock","_list","bullet","ordered","start","items","lastItemWasAParagraph","itemContent","item","space","spaceRegex","isLastItem","containsBlocks","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","Tag","generateListItem","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","generateHeaderCell","generateTableRow","row","generateTableCell","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","whitespace","trimmer","trimmed","parseFunc","tagName","noInnerParse","attrs","htmlSelfClosing","createFootnote","def","Markdown","MarkdownTextArea","Text","Toggle","camelCase","Field","name","label","error","wrapperStyle","useContext","standardProps","htmlFor","Form","cancelButton","onSubmit","submitText","Provider","preventDefault"],"mappings":"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"}